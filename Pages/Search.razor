@page "/"
@page "/search"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext

<h3>Search Travel Deals</h3>

<div class="row mb-3">
    <div class="col">
        <label class="form-label">Origin</label>
        <select class="form-select" @bind="SelectedOrigin">
            <option value="">--Select Origin--</option>
            @foreach (var origin in Origins)
            {
                <option value="@origin">@origin</option>
            }
        </select>
    </div>
    <div class="col">
        <label class="form-label">Destination</label>
        <select class="form-select" @bind="SelectedDestination">
            <option value="">--Select Destination--</option>
            @foreach (var dest in Destinations)
            {
                <option value="@dest">@dest</option>
            }
        </select>
    </div>
</div>

@if (IsRouteSelected)
{
    <div class="row mb-3">
        <div class="col">
            <label class="form-label">Filter by Company</label>
            <select class="form-select" @bind="selectedCompany">
                <option value="">--All Companies--</option>
                @foreach (var comp in Companies)
                {
                    <option value="@comp">@comp</option>
                }
            </select>
        </div>
        <div class="col">
            <label class="form-label">Sort by</label>
            <select class="form-select" @bind="selectedSort">
                <option value="Price">Price</option>
                <option value="Distance">Distance</option>
                <option value="TravelTime">Travel Time</option>
            </select>
        </div>
        <div class="col align-self-end">
            <button class="btn btn-primary" @onclick="ComputeResultsAsync">Search</button>
        </div>
    </div>
}

@if (Results != null && Results.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Route</th>
                <th>Companies</th>
                <th>Price</th>
                <th>Distance</th>
                <th>Travel Time</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Results)
            {
                <tr>
                    <td>@item.RouteDescription</td>
                    <td>@item.CompanyNames</td>
                    <td>@item.TotalPrice.ToString("C")</td>
                    <td>@item.TotalDistance</td>
                    <td>@item.TotalTravelTime</td>
                    <td>
                        <NavLink class="btn btn-success btn-sm" href="@($"reservations?providerIds={string.Join(',', item.ProviderIds)}")">Reserve</NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (Results != null)
{
    <p>No routes found.</p>
}

@code {
    private List<string> Origins = new();
    private List<string> Destinations = new();
    private List<string> Companies = new();
    private string _selectedOrigin = string.Empty;
    private string _selectedDestination = string.Empty;
    // trigger search automatically when both origin and destination are selected
    private string SelectedOrigin
    {
        get => _selectedOrigin;
        set
        {
            if (_selectedOrigin != value)
            {
                _selectedOrigin = value;
                if (IsRouteSelected)
                {
                    _ = ComputeResultsAsync();
                }
                else
                {
                    Results = null;
                    Companies.Clear();
                }
            }
        }
    }
    private string SelectedDestination
    {
        get => _selectedDestination;
        set
        {
            if (_selectedDestination != value)
            {
                _selectedDestination = value;
                if (IsRouteSelected)
                {
                    _ = ComputeResultsAsync();
                }
                else
                {
                    Results = null;
                    Companies.Clear();
                }
            }
        }
    }
    private string selectedCompany = string.Empty;
    private string selectedSort = "Price";
    private List<LegOption>? Results;

    protected override async Task OnInitializedAsync()
    {
        Origins = await DbContext.Legs.Select(l => l.From).Distinct().OrderBy(x => x).ToListAsync();
        Destinations = await DbContext.Legs.Select(l => l.To).Distinct().OrderBy(x => x).ToListAsync();
    }

    private bool IsRouteSelected =>
        !string.IsNullOrEmpty(SelectedOrigin) && !string.IsNullOrEmpty(SelectedDestination);

    // Trigger search automatically when origin or destination changes
    private async Task OnRouteChanged(ChangeEventArgs args)
    {
        if (!IsRouteSelected)
        {
            Results = null;
            Companies.Clear();
            StateHasChanged();
            return;
        }
        await ComputeResultsAsync();
    }

    // Compute multi-leg route options
    private async Task ComputeResultsAsync()
    {
        var legs = await DbContext.Legs.Include(l => l.Providers).ToListAsync();
        // find all simple paths of planet names
        var paths = FindPaths(SelectedOrigin, SelectedDestination, legs);
        var options = new List<LegOption>();
        foreach (var path in paths)
        {
            var selectedProviders = new List<Provider>();
            bool valid = true;
            for (int i = 0; i < path.Count - 1; i++)
            {
                var from = path[i];
                var to = path[i + 1];
                var providers = legs
                    .Where(l => l.From == from && l.To == to)
                    .SelectMany(l => l.Providers)
                    .AsEnumerable();
                if (!string.IsNullOrEmpty(selectedCompany))
                    providers = providers.Where(p => p.CompanyName == selectedCompany);
                if (!providers.Any()) { valid = false; break; }
                var best = providers.OrderBy(p => p.Price).First();
                selectedProviders.Add(best);
            }
            if (!valid) continue;
            var routeDesc = string.Join(" -> ", path);
            var companies = string.Join(", ", selectedProviders.Select(p => p.CompanyName).Distinct());
            var price = selectedProviders.Sum(p => p.Price);
            var distance = selectedProviders.Sum(p => p.Leg!.Distance);
            var travelTime = selectedProviders.Aggregate(TimeSpan.Zero,
                (sum, p) => sum + (p.FlightEnd - p.FlightStart));
            var providerIds = selectedProviders.Select(p => p.Id).ToList();
            options.Add(new LegOption
            {
                RouteDescription = routeDesc,
                CompanyNames = companies,
                TotalPrice = price,
                TotalDistance = distance,
                TotalTravelTime = travelTime,
                ProviderIds = providerIds
            });
        }
        // populate companies filter
        Companies = options.SelectMany(o => o.CompanyNames.Split(',', StringSplitOptions.RemoveEmptyEntries))
            .Select(s => s.Trim()).Distinct().OrderBy(c => c).ToList();
        // sort
        Results = selectedSort switch
        {
            "Price" => options.OrderBy(o => o.TotalPrice).ToList(),
            "Distance" => options.OrderBy(o => o.TotalDistance).ToList(),
            "TravelTime" => options.OrderBy(o => o.TotalTravelTime).ToList(),
            _ => options
        };
    }

    // Depth-first search for simple paths
    private List<List<string>> FindPaths(string origin, string destination, List<Leg> legs)
    {
        var result = new List<List<string>>();
        var visited = new HashSet<string>();
        var path = new List<string> { origin };
        void Dfs(string current)
        {
            if (current == destination)
            {
                result.Add(new List<string>(path));
                return;
            }
            visited.Add(current);
            foreach (var leg in legs.Where(l => l.From == current))
            {
                if (!visited.Contains(leg.To))
                {
                    path.Add(leg.To);
                    Dfs(leg.To);
                    path.RemoveAt(path.Count - 1);
                }
            }
            visited.Remove(current);
        }
        Dfs(origin);
        return result;
    }

    private class LegOption
    {
        public string RouteDescription { get; set; } = string.Empty;
        public string CompanyNames { get; set; } = string.Empty;
        public decimal TotalPrice { get; set; }
        public long TotalDistance { get; set; }
        public TimeSpan TotalTravelTime { get; set; }
        public List<Guid> ProviderIds { get; set; } = new();
    }
}