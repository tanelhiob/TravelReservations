@page "/"
@page "/search"
@using Microsoft.EntityFrameworkCore
@using TravelReservations.Data
@inject AppDbContext DbContext
@inject RouteSearchService SearchService

<h3>Search Travel Deals</h3>

@if (currentPriceListInfo != null)
{
    <div class="alert @(IsExpiringSoon ? "alert-warning" : "alert-info") mb-3">
        <small>
            Pricelist valid until: @currentPriceListInfo.ValidUntil.ToString("yyyy-MM-dd HH:mm") UTC
            @if (IsExpiringSoon)
            {
                <strong> - Expiring soon!</strong>
            }
        </small>
    </div>
}
else
{
    <div class="alert alert-danger mb-3">
        <strong>No valid pricelist available.</strong> Travel data may be outdated.
    </div>
}

<div class="row mb-3">
    <div class="col">
        <label class="form-label">Origin</label>
        <select class="form-select" value="@selectedOrigin" @onchange="OnOriginChanged">
            <option value="">--Select Origin--</option>
            @foreach (var o in Origins)
            {
                <option value="@o">@o</option>
            }
        </select>
    </div>
    <div class="col">
        <label class="form-label">Destination</label>
        <select class="form-select" value="@selectedDestination" @onchange="OnDestinationChanged">
            <option value="">--Select Destination--</option>
            @foreach (var d in Destinations)
            {
                <option value="@d">@d</option>
            }
        </select>
    </div>
</div>

@if (routes != null)
{
    <div class="row mb-3">
        <div class="col">
            <label class="form-label">Filter by Company</label>
            <select class="form-select" value="@selectedCompany" @onchange="OnCompanyChanged">
                <option value="">--All Companies--</option>
                @foreach (var c in Companies)
                {
                    <option value="@c">@c</option>
                }
            </select>
        </div>
        <div class="col">
            <label class="form-label">Sort by</label>
            <select class="form-select" value="@selectedSort" @onchange="OnSortChanged">
                <option value="Price">Price</option>
                <option value="Distance">Distance</option>
                <option value="TravelTime">Travel Time</option>
            </select>
        </div>
        <div class="col align-self-end">
            <button class="btn btn-primary" @onclick="ApplyFilterAndSort">Search</button>
        </div>
    </div>

    @if (!FilteredRoutes.Any())
    {
        <p>No routes found.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Route</th>
                    <th>Companies</th>
                    <th>Price</th>
                    <th>Distance</th>
                    <th>Travel Time</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FilteredRoutes)
                {
                    <tr>
                        <td>@item.RouteDescription</td>
                        <td>@item.CompanyNames</td>
                        <td>@item.TotalPrice.ToString("C")</td>
                        <td>@item.TotalDistance</td>
                        <td>@item.TotalTravelTime</td>
                        <td>
                            <NavLink class="btn btn-success btn-sm" href="@($"reservations?providerIds={string.Join(',', item.ProviderIds)}")">Reserve</NavLink>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<string> Origins = new();
    private List<string> Destinations = new();
    private List<string> Companies = new();
    private string selectedOrigin = string.Empty;
    private string selectedDestination = string.Empty;
    private string selectedCompany = string.Empty;
    private string selectedSort = "Price";

    private List<LegOption>? routes;
    private List<LegOption> FilteredRoutes = new();
    private PriceList? currentPriceListInfo;
    
    private bool IsExpiringSoon => currentPriceListInfo != null && 
                                  currentPriceListInfo.ValidUntil <= DateTime.UtcNow.AddHours(1);

    protected override async Task OnInitializedAsync()
    {
        currentPriceListInfo = await DataInitializer.GetCurrentPriceListAsync(DbContext);
        if (currentPriceListInfo != null)
        {
            Origins = await DbContext.Legs
                .Where(l => l.PriceListId == currentPriceListInfo.Id)
                .Select(l => l.From)
                .Distinct()
                .OrderBy(x => x)
                .ToListAsync();
            Destinations = await DbContext.Legs
                .Where(l => l.PriceListId == currentPriceListInfo.Id)
                .Select(l => l.To)
                .Distinct()
                .OrderBy(x => x)
                .ToListAsync();
        }
    }

    private async Task OnOriginChanged(ChangeEventArgs e)
    {
        selectedOrigin = e.Value?.ToString() ?? string.Empty;
        await LoadRoutesIfReadyAsync();
    }
    private async Task OnDestinationChanged(ChangeEventArgs e)
    {
        selectedDestination = e.Value?.ToString() ?? string.Empty;
        await LoadRoutesIfReadyAsync();
    }
    private async Task LoadRoutesIfReadyAsync()
    {
        if (string.IsNullOrEmpty(selectedOrigin) || string.IsNullOrEmpty(selectedDestination))
        {
            routes = null;
            Companies.Clear();
            FilteredRoutes.Clear();
            StateHasChanged();
            return;
        }
        routes = await SearchService.FindAllRoutesAsync(selectedOrigin, selectedDestination);
        Companies = routes.SelectMany(r => r.CompanyNames.Split(',', StringSplitOptions.RemoveEmptyEntries))
                          .Select(s => s.Trim())
                          .Distinct()
                          .OrderBy(c => c)
                          .ToList();
        ApplyFilterAndSort();
    }
    private Task OnCompanyChanged(ChangeEventArgs e)
    {
        selectedCompany = e.Value?.ToString() ?? string.Empty;
        ApplyFilterAndSort();
        return Task.CompletedTask;
    }
    private Task OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "Price";
        ApplyFilterAndSort();
        return Task.CompletedTask;
    }

    private void ApplyFilterAndSort()
    {
        if (routes == null) return;
        var list = string.IsNullOrEmpty(selectedCompany)
            ? routes
            : routes.Where(r => r.CompanyNames.Split(',', StringSplitOptions.None)
                .Select(c => c.Trim())
                .Contains(selectedCompany))
                .ToList();

        FilteredRoutes = selectedSort switch
        {
            "Distance" => list.OrderBy(r => r.TotalDistance).ToList(),
            "TravelTime" => list.OrderBy(r => r.TotalTravelTime).ToList(),
            _ => list.OrderBy(r => r.TotalPrice).ToList(),
        };
    }
}