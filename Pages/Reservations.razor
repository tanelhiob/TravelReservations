@page "/reservations"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject AppDbContext DbContext
@inject NavigationManager Navigation

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "providerIds")]
    public string? ProviderIdsParam { get; set; }

    private List<Guid> ProviderIds = new();
    private List<Provider>? SelectedProviders;
    private List<Reservation> ReservationsList = new();
    private ReservationModel model = new();
    private bool isSaving = false;
    private string? message;

    protected override async Task OnParametersSetAsync()
    {
        // Parse providerIds from query
        if (!string.IsNullOrEmpty(ProviderIdsParam))
        {
            ProviderIds = ProviderIdsParam.Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => Guid.TryParse(s, out var g) ? g : Guid.Empty)
                .Where(g => g != Guid.Empty)
                .ToList();
            if (ProviderIds.Any())
            {
                SelectedProviders = await DbContext.Providers
                    .Include(p => p.Leg)
                    .Where(p => ProviderIds.Contains(p.Id))
                    .ToListAsync();
            }
            else
            {
                SelectedProviders = null;
            }
        }
        else
        {
            SelectedProviders = null;
        }
        // Only show reservations from stored pricelists (last 15)
        var storedPriceListIds = await DbContext.PriceLists
            .Select(p => p.Id)
            .ToListAsync();
            
        ReservationsList = await DbContext.Reservations
            .Where(r => storedPriceListIds.Contains(r.PriceListId))
            .OrderByDescending(r => r.CreatedAt)
            .ToListAsync();
    }

    private async Task SubmitAsync()
    {
        if (SelectedProviders == null || !SelectedProviders.Any())
            return;
            
        // Validate that the pricelist is still valid
        var currentPriceList = await DataInitializer.GetCurrentPriceListAsync(DbContext);
        if (currentPriceList == null)
        {
            message = "No valid pricelist available. Cannot make reservation.";
            return;
        }
        
        // Check if all selected providers belong to the current valid pricelist
        var validProviders = await DbContext.Providers
            .Include(p => p.Leg)
            .Where(p => SelectedProviders.Select(sp => sp.Id).Contains(p.Id) && 
                       p.Leg!.PriceListId == currentPriceList.Id)
            .ToListAsync();
            
        if (validProviders.Count != SelectedProviders.Count)
        {
            message = "Pricelist has expired. Please search for new routes.";
            return;
        }
        
        isSaving = true;
        // Aggregate reservation details
        var routes = string.Join(" | ", SelectedProviders.Select(p => $"{p.Leg!.From} -> {p.Leg.To}"));
        var companies = string.Join(", ", SelectedProviders.Select(p => p.CompanyName).Distinct());
        var totalPrice = SelectedProviders.Sum(p => p.Price);
        var totalTime = SelectedProviders.Aggregate(TimeSpan.Zero,
            (sum, p) => sum + (p.FlightEnd - p.FlightStart));
        var reservation = new Reservation
        {
            Id = Guid.NewGuid(),
            FirstName = model.FirstName,
            LastName = model.LastName,
            Routes = routes,
            TotalPrice = totalPrice,
            TotalTravelTime = totalTime,
            Companies = companies,
            CreatedAt = DateTime.UtcNow,
            PriceListId = currentPriceList.Id
        };
        DbContext.Reservations.Add(reservation);
        await DbContext.SaveChangesAsync();
        message = "Reservation created successfully!";
        await Task.Delay(1000);
        Navigation.NavigateTo("/reservations");
    }

    private class ReservationModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;
        [Required]
        public string LastName { get; set; } = string.Empty;
    }
}

@if (SelectedProviders != null && SelectedProviders.Any())
{
    <h3>Reservation Details</h3>
    <ul class="list-group mb-3">
        @foreach (var p in SelectedProviders)
        {
            <li class="list-group-item">
                <strong>@p.Leg!.From -> @p.Leg.To</strong><br />
                Company: @p.CompanyName<br />
                Price: @p.Price.ToString("C")<br />
                Travel Time: @(p.FlightEnd - p.FlightStart)
            </li>
        }
    </ul>
    <h5>Aggregate</h5>
    <p><strong>Route:</strong> @string.Join(" | ", SelectedProviders.Select(p => $"{p.Leg!.From}->{p.Leg.To}"))</p>
    <p><strong>Companies:</strong> @string.Join(", ", SelectedProviders.Select(p => p.CompanyName).Distinct())</p>
    <p><strong>Total Price:</strong> @SelectedProviders.Sum(p => p.Price).ToString("C")</p>
    <p><strong>Total Travel Time:</strong> @SelectedProviders.Aggregate(TimeSpan.Zero, (sum, p) => sum + (p.FlightEnd - p.FlightStart))</p>

    <EditForm Model="model" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">First Name</label>
            <InputText class="form-control" @bind-Value="model.FirstName" />
        </div>
        <div class="mb-3">
            <label class="form-label">Last Name</label>
            <InputText class="form-control" @bind-Value="model.LastName" />
        </div>
        <button class="btn btn-primary" type="submit" disabled="@isSaving">Confirm Reservation</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-success mt-2">@message</div>
    }
}
else
{
    <h3>Existing Reservations</h3>
    @if (!ReservationsList.Any())
    {
        <p>No reservations yet.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Route</th>
                    <th>Company</th>
                    <th>Price</th>
                    <th>Travel Time</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var res in ReservationsList)
                {
                    <tr>
                        <td>@res.FirstName @res.LastName</td>
                        <td>@res.Routes</td>
                        <td>@res.Companies</td>
                        <td>@res.TotalPrice.ToString("C")</td>
                        <td>@res.TotalTravelTime</td>
                        <td>@res.CreatedAt.ToLocalTime().ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}